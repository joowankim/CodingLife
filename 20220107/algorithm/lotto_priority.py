# 프로그래머스 - 로또의 최고 순위와 최저 순위
#
# 등 수를 결정하는 것은 일치하는 번호의 개수: ranks
# 45개의 번호들 중 고른 로또 번호와 당첨 번호에서 나온 번호들의 횟수를 센다: numbers
# 일치하는 번호의 개수는 2번 이상 뽑혔다: sames
# 지워진 번호의 개수는 0의 개수이다: erased
# 일치했다고 기대할 수 있는 최대 개수: sames + erased
# 일치했다고 기대할 수 있는 최소 개수: sames


def counts(lottos, win_nums):
    numbers = [0] * 46
    for number in lottos + win_nums:
        numbers[number] += 1
    return numbers


def count_sames(numbers):
    return len(list(filter(lambda number: number > 1, numbers[1:])))


def solution(lottos, win_nums):
    ranks = {
        0: 6, 1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1
    }
    numbers = counts(lottos, win_nums)
    sames = count_sames(numbers)
    erased = numbers[0]
    return [ranks[sames + erased], ranks[sames]]


assert solution([44, 1, 0, 0, 31, 25], [31, 10, 45, 1, 6, 19]) == [3, 5]
assert solution([0, 0, 0, 0, 0, 0], [38, 19, 20, 40, 15, 25]) == [1, 6]
assert solution([45, 4, 35, 20, 3, 9], [20, 9, 3, 45, 4, 35]) == [1, 1]


assert counts([44, 1, 0, 0, 31, 25], [31, 10, 45, 1, 6, 19]) == \
       [2,
        2, 0, 0, 0, 0, 1, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1]
assert counts([0, 0, 0, 0, 0, 0], [38, 19, 20, 40, 15, 25]) == \
       [6,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 1, 1,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
        0, 0, 0, 0, 0]
assert counts([45, 4, 35, 20, 3, 9], [20, 9, 3, 45, 4, 35]) == \
       [0,
        0, 0, 2, 2, 0, 0, 0, 0, 2, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 2]
assert counts([0, 0, 0, 33, 22, 11], [12, 32, 43, 33, 22, 11]) == \
       [3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0]


assert count_sames(
    [2,
     2, 0, 0, 0, 0, 1, 0, 0, 0, 1,
     0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
     0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
     2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 1, 1]) == 2

assert count_sames(
    [6,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 1, 0, 0, 0, 1, 1,
     0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
     0, 0, 0, 0, 0]
) == 0

assert count_sames(
    [0,
     0, 0, 2, 2, 0, 0, 0, 0, 2, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 2]
) == 6

assert count_sames(
    [3,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     2, 1, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 1, 2, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 1, 0, 0]
) == 3
